#!/bin/expect -f
#
# This Expect script was generated by autoexpect on Wed Apr 25 15:36:27 2018
# Expect and autoexpect were both written by Don Libes, NIST.
#
# Note that autoexpect does not guarantee a working script.  It
# necessarily has to guess about certain things.  Two reasons a script
# might fail are:
#
# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
# etc.) and devices discard or ignore keystrokes that arrive "too
# quickly" after prompts.  If you find your new script hanging up at
# one spot, try adding a short sleep just before the previous send.
# Setting "force_conservative" to 1 (see below) makes Expect do this
# automatically - pausing briefly before sending each character.  This
# pacifies every program I know of.  The -c flag makes the script do
# this in the first place.  The -C flag allows you to define a
# character to toggle this mode off and on.

set force_conservative 0  ;# set to 1 to force conservative mode even if
			  ;# script wasn't run conservatively originally
if {$force_conservative} {
	set send_slow {1 .1}
	proc send {ignore arg} {
		sleep .1
		exp_send -s -- $arg
	}
}

#
# 2) differing output - Some programs produce different output each time
# they run.  The "date" command is an obvious example.  Another is
# ftp, if it produces throughput statistics at the end of a file
# transfer.  If this causes a problem, delete these patterns or replace
# them with wildcards.  An alternative is to use the -p flag (for
# "prompt") which makes Expect only look for the last line of output
# (i.e., the prompt).  The -P flag allows you to define a character to
# toggle this mode off and on.
#
# Read the man page for more info.
#
# -Don


set timeout -1
spawn cpan
match_max 100000
expect -exact "Sorry, we have to rerun the configuration dialog for CPAN.pm due to\r
some missing parameters. Configuration will be written to\r
 <</root/.cpan/CPAN/MyConfig.pm>>\r
\r
\r
CPAN.pm requires configuration, but most of it can be done automatically.\r
If you answer 'no' below, you will enter an interactive dialog for each\r
configuration option instead.\r
\r
Would you like to configure as much as possible automatically? \[yes\] "
send -- "\r"
expect -exact "\r
\r
 <install_help>\r
\r
Warning: You do not have write permission for Perl library directories.\r
\r
To install modules, you need to configure a local Perl library directory or\r
escalate your privileges.  CPAN can help you by bootstrapping the local::lib\r
module or by configuring itself to use 'sudo' (if available).  You may also\r
resolve this problem manually if you need to customize your setup.\r
\r
What approach do you want?  (Choose 'local::lib', 'sudo' or 'manual')\r
 \[local::lib\] "
send -- "sudo\r"
expect -exact "sudo\r
\r
Autoconfigured everything but 'urllist'.\r
\r
Now you need to choose your CPAN mirror sites.  You can let me\r
pick mirrors for you, you can select them from a list or you\r
can enter them by hand.\r
\r
Would you like me to automatically choose some CPAN mirror\r
sites for you? (This means connecting to the Internet) \[yes\] "
send -- "\r"
expect -exact "\r
Trying to fetch a mirror list from the Internet\r
Fetching with HTTP::Tiny:\r
http://www.perl.org/CPAN/MIRRORED.BY\r
HTTP::Tiny failed with an internal error: IO::Socket::SSL 1.42 must be installed for https support\r
\r
Fetching with HTTP::Tiny:\r
http://www.perl.org/CPAN/MIRRORED.BY.gz\r
HTTP::Tiny failed with an internal error: IO::Socket::SSL 1.42 must be installed for https support\r
\r
Fetching with Net::FTP:\r
ftp://ftp.perl.org/pub/CPAN/MIRRORED.BY\r
\r
Looking for CPAN mirrors near you (please be patient)\r
..................... done!\r
\r
New urllist\r
  http://ftp.osuosl.org/pub/CPAN/\r
  http://mirror.teklinks.com/CPAN/\r
  http://cpan.pair.com/\r
\r
Autoconfiguration complete.\r
\r
commit: wrote '/root/.cpan/CPAN/MyConfig.pm'\r
\r
You can re-run configuration any time with 'o conf init' in the CPAN shell\r
Terminal does not support AddHistory.\r
\r
cpan shell -- CPAN exploration and modules installation (v1.9800)\r
Enter 'h' for help.\r
\r
\[4mcpan\[1\]> \[24m\[1m"
send -- "exit\r"
expect eof
